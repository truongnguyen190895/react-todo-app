{"version":3,"sources":["components/Header.tsx","components/CreateInput.tsx","components/TodoItem.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","CreateInput","props","useState","todo","setTodo","Form","Group","controlId","type","placeholder","onChange","event","todoString","target","value","Button","variant","onClick","preventDefault","updateItem","TodoItem","isDone","setIsDone","style","backgroundColor","height","margin","content","size","delete","id","App","todoItem","setTodoItem","deleteItem","prev","filter","item","index","newItem","prevItems","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAEe,SAASA,IACpB,OACI,sBAAKC,UAAU,SAAf,UACI,4CACA,uFACA,uFACA,yE,oBCDG,SAASC,EAAYC,GAEhC,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAcA,OACI,cAACC,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAAtB,UACK,uBACAC,KAAK,OACLC,YAAY,kBACZC,SAXb,SAAwBC,GACnB,IAAIC,EAAaD,EAAME,OAAOC,MAC9BV,EAAQQ,IAUDE,MAAOX,EACPJ,UAAU,eAEd,cAACgB,EAAA,EAAD,CAAQC,QAAQ,UACfR,KAAK,SACLS,QAxBT,SAAsBN,GAClBA,EAAMO,iBACNjB,EAAMkB,WAAWhB,GACjBC,EAAQ,KAmBJ,yBCzBG,SAASgB,EAASnB,GAE7B,MAA4BC,oBAAS,GAArC,mBAAOmB,EAAP,KAAeC,EAAf,KAeA,OACI,sBAAKL,QAXT,WACIK,GAAWD,IAUWE,MAAOF,EANZ,CACjBG,gBAAiB,UACjBC,OAAQ,QAI4C,CAACA,OAAQ,QAAS1B,UAAU,OAAhF,UACI,oBAAGwB,MAAO,CAACG,OAAQ,UAAnB,UAA+BzB,EAAM0B,QAArC,IAA+CN,GAAU,iBACzD,cAACN,EAAA,EAAD,CAAQC,QAAQ,SAASY,KAAK,KAAKX,QAjB3C,WACIhB,EAAM4B,OAAO5B,EAAM6B,KAgBf,uBCKGC,MA5Bf,WACE,MAAgC7B,mBAAc,IAA9C,mBAAO8B,EAAP,KAAiBC,EAAjB,KAUA,SAASC,EAAWJ,GAChBG,GAAY,SAACE,GACZ,OAAOA,EAAKC,QAAO,SAACC,EAAMC,GACvB,OAAOA,IAAUR,QAKzB,OAAQ,qCACR,cAAChC,EAAD,IACA,cAACE,EAAD,CAAamB,WAlBb,SAAiBoB,GACZA,GACDN,GAAY,SAACO,GACX,MAAM,GAAN,mBAAWA,GAAX,CAAsBD,UAgB3BP,EAASS,KAAI,SAACJ,EAAaC,GAC1B,OAAO,cAAClB,EAAD,CAAsBU,GAAIQ,EAAOX,QAASU,EAAMR,OAAQK,GAAzCI,UCdXI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.94cb6a90.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className='header'>\r\n            <h1>To-Do List</h1>\r\n            <p>Enter text into input field to add items to your list.</p>\r\n            <p>Click \"Delete\" button to remove the item from the list</p>\r\n            <p>Click the item to mark it as complete</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\nimport {Form, Button} from 'react-bootstrap';\r\n\r\ninterface ICreateInputProps{\r\n    updateItem: (item:string) => void;\r\n}\r\n\r\nexport default function CreateInput(props: ICreateInputProps) {\r\n   \r\n    const [todo, setTodo] = useState('');\r\n\r\n    function handleSubmit(event:any){\r\n        event.preventDefault();\r\n        props.updateItem(todo);\r\n        setTodo('')\r\n       \r\n    }\r\n\r\n    function handleOnChange(event:any){\r\n         let todoString = event.target.value;\r\n         setTodo(todoString)\r\n    }\r\n\r\n    return (\r\n        <Form>\r\n            <Form.Group controlId=\"formBasicEmail\">\r\n                 <input \r\n                 type=\"text\" \r\n                 placeholder=\"Input something\"\r\n                 onChange={handleOnChange}\r\n                value={todo}\r\n                className='input-form'\r\n                 />\r\n            <Button variant=\"primary\"\r\n             type=\"submit\"\r\n             onClick={handleSubmit}\r\n             >Submit</Button>\r\n            </Form.Group>\r\n        </Form>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\nimport {Button} from 'react-bootstrap'\r\n\r\ninterface ITodoItemProps{\r\n    content: string,\r\n    id: number,\r\n    delete: (id:number) => void;\r\n}\r\nexport default function TodoItem(props: ITodoItemProps) {\r\n\r\n    const [isDone, setIsDone] = useState(false);\r\n    function handleClick(){\r\n        props.delete(props.id)\r\n    }\r\n\r\n    function toggle(){\r\n        setIsDone(!isDone)       \r\n\r\n    }\r\n\r\n    const customeStyle = {\r\n        backgroundColor: '#28B5B5',\r\n        height: '45px'\r\n    }\r\n\r\n    return (\r\n        <div onClick={toggle} style={isDone? customeStyle : {height: '45px'}} className=\"item\">\r\n            <p style={{margin: 'auto 0'}}>{props.content} {isDone && '(completed)'}</p>\r\n            <Button variant=\"danger\" size=\"sm\" onClick={handleClick}>Delete</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport Header from './components/Header'\r\nimport CreateInput from './components/CreateInput'\r\nimport TodoItem from './components/TodoItem'\r\n\r\nfunction App() {\r\n  const [todoItem, setTodoItem] = useState<any>([]);\r\n\r\n  function addItem(newItem:string){\r\n    if(newItem){\r\n      setTodoItem((prevItems: any)=>{\r\n        return [...prevItems, newItem];\r\n      })\r\n    }\r\n  }\r\n\r\n  function deleteItem(id:number){\r\n      setTodoItem((prev: [])=>{\r\n       return prev.filter((item, index)=>{\r\n          return index !== id;\r\n        })\r\n      })\r\n  }\r\n\r\n  return (<>\r\n  <Header />\r\n  <CreateInput updateItem={addItem} />\r\n  {todoItem.map((item:string, index:number)=>{\r\n    return <TodoItem key={index} id={index} content={item} delete={deleteItem}/>\r\n  })}\r\n  </>)\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}